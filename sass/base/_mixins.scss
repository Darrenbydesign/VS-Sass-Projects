////
/// Mixins simple solutions to complicated CSS/SASS problems... thank me later
/// @group Mixins
/// @author Darren Sorrels
////


/// Helper to clear inner floats
/// @group helpers 
/// @author Nicolas Gallagher
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix
@mixin clearfix {
    &::after {
        content: '';
        display: table;
        clear: both;
    }
}


/// Vendor Prefix generator for properties that need them.
/// This one is to be used for general cases where there isn't already a mixin built with the prefixes in place.
/// @group Cross-Browser Support
/// @param {alpanum} $map - used to map the vendor prefixes to a property declaration
/// @param {string} $vendors['webkit' 'moz' 'ms' 'o'] - map values from the $prop map
@mixin prefix($map, $vendors: webkit moz ms o) {
    @each $prop, $value in $map {
        @if $vendors {
            @each $vendor in $vendors {
                #{'-' + $vendor + '-' + $prop}: #{$value};
            }
        }
        /// add regular property to the end of list without vendor prefixes
        #{$prop}: #{$value};
    }
}


/// Border Radius
/// Simple mixin for border-radius changes. just include this mixin and provide a value and you're good to go.
/// @group Cross-Browser Support
/// @param {number} $radius[0] - value that desired for border-radius
@mixin border-radius($radius: 0) {
    @include prefix( (border-radius: $radius));
}


/// Button
/// Button mixin creates a button for you. all it needs is a color declararation added for the background yay!
/// No more using the extend class on the button each time bloating the output CSS.
/// @group helpers
/// @param {alphanum} $color [$gray] - include a color in the mixin and this will add all the values for you
/// @param {bool} $extend [true] - This value pertains to the button static mixin that is used to do all the heavy lifting. It should be set to true to start the loop.
@mixin button($color: $gray, $extend: true) {
    @include button-static($extend);
    background-color: $color;
    color: dt($color);
    border-color: mix($white, $color, 25%);

    a {
        color: dt($color);
        text-decoration: none;
    }

    &:hover {
        background-color: mix($black, $color, 15%);
        border-color: mix($black, $color, 40%);
        color: dt($color);
        text-decoration: none;
    }
}

///Variable used for generating the button mixin placeholder selectors
///@type Map
$Placeholder-Selectors: ();

/// Button mixin creates a button for you. all it needs is a color declararation added for the background yay!
/// No more using the extend class on the button each time bloating the output CSS.

/// @param {String} $button-selector - unique value that drives looping function to create buttons dynamically
/// @param {bool} $extend [true] - It should be set to true to start the loop.
@mixin button-static($extend: true) {
    $button-selector: map-get($Placeholder-Selectors, 'button');

    @if $extend==true {
        @if $button-selector==null {
            $button-selector: unique-id();
            $Placeholder-Selectors: map-merge($Placeholder-Selectors, ('button': $button-selector)) !global;

            @at-root %#{$button-selector} {
                @include button-static(false);
            }
        }

        @extend %#{$button-selector};
    }
    @else {
        border: none;
        padding-left: 10px;
        padding-right: 10px;
        display: inline-block;
        text-align: center;
        vertical-align: middle;
        margin-bottom: 0;
        @include border-radius(0px);

        &:hover {
            cursor: pointer;
        }
    }
}


/// Strips browser styling from an input
/// @group helpers 
@mixin unstyled-input {
    margin: 0;
    padding: 0;
    border: none;
    outline: none;
    background-color: transparent;
    font: inherit;
}

/// Font Size
/// This mixin calls on the calculateRem function in the functions partial file it will output the pixel size
/// first then the rem unit for browswer that support it (IE9+).
/// @group helpers 
/// @param {variable} $size - pixel size you want to convert into em/rems
@mixin font-size($size) {
    font-size: $size;
    font-size: calculateEm($size);
    // font-size: calculateRem($size);
}

/// Responsive Image
/// Keep images from scaling beyond the width of their parents with this mixin
/// @author Boostrap Team
/// @group helpers 
/// @param {String} $display [block] - set the display type of the image for layout purposes.
@mixin img-responsive($display: block) {
    display: $display;
    max-width: 100%;
    /// Part 1: Set a maximum relative to the parent
    height: auto;
    /// Part 2: Scale the height according to the width, otherwise you get stretching
}

///
/// This mixin will alleviate the need to write the vendor prefixes yourself for animations.
/// Now all you have to do is call this mixin and enter your animation name and enter your actions.
/// @group helpers 
/// @param {string} $animation-name - Enter the name of your animation
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }

    @-moz-keyframes #{$animation-name} {
        @content;
    }

    @-ms-keyframes #{$animation-name} {
        @content;
    }

    @-o-keyframes #{$animation-name} {
        @content;
    }

    @keyframes #{$animation-name} {
        @content;
    }
}

/// This mixin can be coupled with the keyframes animation above.
/// Use this one to give animation action values like timing and looping, etc.
/// @group helpers 
@mixin animation($str) {
    @include prefix((animation: $str));
}

/// A mixin that makes creating transition animations a little less of a burden.
/// @group helpers 
/// @param {string}  $prop - property for the transition animation
@mixin transition($args) {
    @include prefix ((transition: $args));
}

/// Create link colors easily with this mixin. This very useful for navigation links and aritcle/blog links.
/// @group helpers 
/// @param {alphanum} $link - something about that value here
/// @param {alphanum} $visited - something about that value here
/// @param {alphanum} $hover - something about that value here
/// @param {alphanum} $active - something about that value here
@mixin link-color($link, $visited, $hover, $active) {
    a {
        color: $link;

        &:visited {
            color: $visited;
        }

        &:hover {
            color: $hover;
        }

        &:active {
            color: $active;
        }
    }
}

/// Media Queries
/// These mixins help with creating media queries. They can now be more semantic instead of worrying about the
/// syntax of the @media call you can just call the mixin and place in your content. This does all that for you!

/// Media Query Small
/// @group media queries
/// @type Number
$mq-small: 320px;

/// Media Query medium
/// @group media queries
/// @type Number
$mq-medium: 768px;

/// Media Query large
/// @group media queries
/// @type Number
$mq-large: 1200px;

/// Media Query Extra Large
/// @group media queries
/// @type Number
$mq-xlarge: 1600px;

/// Breakpoint extra large
/// Extra large screen breakpoints (ex. widescreen desktop views and  above)
/// @group media queries
/// @param {variable} $mq-xlarge - uses the variable  for really wide screen widths
/// @content conditions for element changes based on the viewport go here
@mixin breakpoint-xl {
    /// large screen breakpoints (used only when absolutely necessary. targeting over 1800px)
    @media only screen and (min-width: $mq-xlarge) {
        @content;
    }
}

/// Breakpoint large
/// large screen breakpoints (ex. desktops and large tablets)
/// @group media queries
/// @param {variable} $mq-large - uses the variable for large screen widths
/// @content conditions for element changes based on the viewport go here
@mixin breakpoint-lg {
    @media only screen and (min-width: $mq-large) {
        @content;
    }
}

/// Breakpoint medium
/// medium screen breakpoints (ex. small laptops,tablets,)
/// @group media queries
/// @param {variable} $mq-medium- uses the variable  for medium screen widths
/// @content conditions for element changes based on the viewport go here
@mixin breakpoint-md {
    @media only screen and (min-width: $mq-medium) and (max-width: 1024px) {
        @content;
    }
}

/// Breakpoint small
/// small screen breakpoints (ex. phones and phablets)
/// @group media queries
/// @param {variable} $mq-small - uses the variable  for small screen widths
/// @content conditions for element changes based on the viewport go here
@mixin breakpoint-sm {
    @media only screen and (min-width: $mq-small) and (max-width: 480px) {
        @content;
    }
}


/// Define the upper and lower range of the media queries programatically for more complex media queries

/// Flexible query extra large
/// @group media queries
/// @type Number
$fq-xlarge: cb(1920px) !default;

/// Flexible query large
/// @group media queries
/// @type Number
$fq-large: cb(1440px) !default;

/// Flexible query medium
/// @group media queries
/// @type Number
$fq-medium: cb(1024px) !default;

/// Flexible query small
/// @group media queries
/// @type Number
$fq-small: cb(640px) !default;

/// Flexible query range (small)
/// @group media queries
/// @type list
$fq-small-range: (0, $fq-small) !default;

/// Flexible query range (medium)
/// @group media queries
/// @type list
$fq-medium-range: ($fq-small + ce(1px), $fq-medium) !default;

/// Flexible query range (large)
/// @group media queries
/// @type list
$fq-large-range: ($fq-medium + ce(1px), $fq-large) !default;

/// Flexible Query range (extra large)
/// @group media queries
/// @type list
$fq-xlarge-range: ($fq-large + ce(1px), $fq-xlarge) !default;


//=====================================
// FLEXBOX Media Queries for Flex Grid
//=====================================

/// Flexible breakpoint extra large
/// This media query uses a more fluid break styles that uses ems instead of pixels
///  Extra large screen breakpoints (ex. widescreen desktop views and  above)
/// @group media queries
/// @param {variable} $fq-xlarge - uses the variable  for small screen widths
/// @content conditions for element changes based on the viewport go here
@mixin flexpoint-xl {
    /// Smaller and Medium screen sizes
    @media (min-width: $fq-xlarge) {
        @content;
    }
}

/// Flexible breakpoint large
/// This media query uses a more fluid break styles that uses ems instead of pixels
/// large screen breakpoints (ex. widescreen desktop views and  above)
/// @group media queries
/// @param {variable} $fq-large - uses the variable  for small screen widths
/// @content conditions for element changes based on the viewport go here
@mixin flexpoint-lg {
    /// Smaller and Medium screen sizes
    @media (min-width: $fq-large) {
        @content;
    }
}

/// Flexible breakpoint medium
/// This media query uses a more fluid break styles that uses ems instead of pixels
/// medium screen breakpoints (ex. small laptops,tablets,)
/// @group media queries
/// @param {variable} $fq-medium - uses the variable  for small screen widths
/// @content conditions for element changes based on the viewport go here
@mixin flexpoint-md {
    /// Smaller and Medium screen sizes
    @media (min-width: $fq-medium) {
        @content;
    }
}

/// Flexible breakpoint small
/// This media query uses a more fluid break styles that uses ems instead of pixels
/// small screen breakpoints (ex. phones and phablets)
/// @group media queries
/// @param {variable} $fq-small - uses the variable  for small screen widths
/// @content conditions for element changes based on the viewport go here
@mixin flexpoint-sm {
    @media (min-width: $fq-small) {
        @content;
    }
}


/// FlexBox mixin created to place backwards compatible flexbox code 
/// into your CSS so you don't have to remember it
/// @group Flexbox
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

/// Flex mixin created with backwards compatible flexbox code for the flex property
/// that way support for older browsers isn't completely lost
/// It follows the same spec as flexbox's flex spec. See below
/// @example scss flex mixin
    ///  .my-flex-item{
    ///   @include flex(2);
    ///  }
    ///  OR
    ///  .myy-flex-item{
    ///  @include flex(0 1 100%)
    /// }
///
/// @group Flexbox
/// @link https://css-tricks.com/snippets/css/a-guide-to-flexbox/
/// @param {String} $values - this is the value by which the flex item will be increased.
@mixin flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex: $values;
    -webkit-flex: $values;
    -ms-flex: $values;
    flex: $values;
}

/// Flex direction mixin for a quick way to provide the direction to a flex item
/// @group Flexbox
/// @param {string} $values [row] - The direction by which a flex-item will move along the X or Y axis
/// The default value is set to Row because most of the time we want to make items flex across the horizontal plane
@mixin flex-direction($values: row) {
    -ms-flex-direction: $values;
    flex-direction: $values;
}

/// Mixin for the FLex-flow short-hand CSS call. It defaults to row wrap since that is most commonly used initiall
/// the mixin makes this easy to change when dealing with media queries
/// @group Flexbox
/// @param {string} $direction [row] - sets the flex-item evenly across the horizontal acces
/// @param {string} $wrap [wrap] - sets the flex items to wrap when they reach the edge of its parent flex container.
@mixin flex-flow($direction: row, $wrap: wrap) {
    flex-flow: $direction $wrap;
}

/// Align Items: 
/// the align-items property is seldom changed in these projects, but an effort to pre-emptive we have included
/// this mixin to make changing the value easier. Our default is set to center(most of the project models need to be changed to this state).
/// @group Flexbox
@mixin align-items($values: center) {
    -webkit-box-align: $values;
    -moz-box-align: $values;
    -ms-flex-align: $values;
    -webkit-align-items: $values;
    align-items: $values;
}


/// Align-content
/// @param {String} $value [center] - This aligns flex child content in a group along the x or y axis depending the parent container flex-direction (row or column)
/// @group Flexbox
@mixin align-content($value: center) {
    align-items: $value;
}

/// Justify-content
/// @param {String} $value [flex-start] - justifies the content in a group along the x axis (left to right or reverse)
/// @group Flexbox
@mixin justify-content($values: flex-start) {
    -webkit-box-pack: $values;
    -moz-box-pack: $values;
    -ms-flex-pack: $values;
    -webkit-justify-content: $values;
    justify-content: $values;
}

/// Order 
/// @param {Number} $value [0] - This changes the order in which flex children appear in the viewport.
/// @group Flexbox
@mixin order($value: 0) {
    -webkit-box-ordinal-group: $value;
    -moz-box-ordinal-group: $value;
    -ms-flex-order: $value;
    -webkit-order: $value;
    order: $value;
}
